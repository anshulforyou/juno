"use strict";(self.webpackChunkjuno_docs=self.webpackChunkjuno_docs||[]).push([[1477],{10:n=>{n.exports=JSON.parse('{"blogPosts":[{"id":"junopi","metadata":{"permalink":"/blog/junopi","editUrl":"https://github.com/NethermindEth/juno/tree/main/docs/blog/2022-06-24-junopi/index.mdx","source":"@site/blog/2022-06-24-junopi/index.mdx","title":"Running Juno from your Raspberry Pi","description":"Juno is a node which aims to help decentralise StarkNet, a prominent Ethereum Layer 2.","date":"2022-06-24T00:00:00.000Z","formattedDate":"June 24, 2022","tags":[{"label":"juno","permalink":"/blog/tags/juno"},{"label":"rpi","permalink":"/blog/tags/rpi"},{"label":"raspberry","permalink":"/blog/tags/raspberry"},{"label":"pi","permalink":"/blog/tags/pi"},{"label":"deploy","permalink":"/blog/tags/deploy"}],"readingTime":4.755,"hasTruncateMarker":false,"authors":[{"name":"Diego de Pablos","title":"Intern at Juno","url":"https://github.com/D-DePablos","imageURL":"https://github.com/D-DePablos.png","key":"depablos"},{"name":"Marcos Maceo","title":"StarkNet Core Developer","url":"https://github.com/stdevMac","imageURL":"https://github.com/stdevMac.png","key":"maceo"}],"frontMatter":{"slug":"junopi","title":"Running Juno from your Raspberry Pi","authors":["depablos","maceo"],"tags":["juno","rpi","raspberry","pi","deploy"]},"nextItem":{"title":"Welcome","permalink":"/blog/welcome"}},"content":"Juno is a node which aims to help **decentralise StarkNet, a prominent Ethereum Layer 2**.\\n\\nFor its mission to be achieved, it needs people to **start running their own node**.\\n\\nTo become one of the early few making StarkNet better, read below.\\n\\n### Disclaimer\\n\\nIn this short article we lay out the steps to get a Raspberry PI with a working [Raspbian](https://www.raspbian.org/)\\ninstallation to run the Juno StarkNet node. We assume that you have access as a root user to the Pi.\\n\\nAt time of writing, **both StarkNet and Juno are still in an early release**. Expect this guide and required steps to change often!\\n\\nFor the latest on the project, check out our [Github repo](https://github.com/NethermindEth/juno), and refer to our\\n[Documentation](https://gojuno.xyz/).\\n\\nThe disk space issues are currently work in progress, and will be addressed in an upcoming new release.\\n\\n## \ud83c\udfaf Features\\n\\n- [Get and Sync state from Layer 1](https://gojuno.xyz/docs/features/sync) (Ethereum).\\n- [Get and Sync state from API](https://gojuno.xyz/docs/features/sync) (Feeder Gateway).\\n- Store [StarkNet State](https://gojuno.xyz/docs/features/sync) locally.\\n- Store StarkNet Transactions.\\n- Store StarkNet Blocks.\\n- Store the ABI and full code of StarkNet contracts.\\n- Ethereum-like [JSON RPC API](https://gojuno.xyz/docs/features/rpc) following\\n[this spec](https://github.com/starkware-libs/starknet-specs/blob/master/api/starknet_api_openrpc.json). Currently\\nsupported are:\\n- `starknet_getBlockWithTxHashes` - Get block information with transaction hashes given the block id.\\n- `starknet_getBlockWithTxs` - Get block information with full transactions given the block id.\\n- `starknet_getStateUpdate` - Get the information about the result of executing the requested block.\\n- `starknet_getStorageAt` - Get the value of the storage at the given address and key.\\n- `starknet_getTransactionByHash` - Get the details and status of a submitted transaction.\\n- `starknet_getTransactionByBlockIdAndIndex` - Get the details of a transaction by a given block id and index.\\n- `starknet_getTransactionReceipt` - Get the transaction receipt by the transaction hash.\\n- `starknet_getClassHashAt` - Get the contract class hash in the given block for the contract deployed at the given address.\\n- `starknet_getBlockTransactionCount` -  Get the number of transactions in a block given a block id.\\n- `starknet_call` - Call a StarkNet function without creating a transaction.\\n- `starknet_blockNumber` - Get the most recent accepted block number.\\n- `starknet_blockHashAndNumber` - Get the most recent accepted block hash and number.\\n- `starknet_chainId` - Return the currently configured StarkNet chain id.\\n- `starknet_pendingTransactions` - Returns the transactions in the transaction pool, recognized by this sequencer.\\n- `starknet_syncing` - Returns an object about the sync status, or false if the node is not synching.\\n- [Prometheus Metrics](https://gojuno.xyz/docs/features/metrics).\\n- [Dockerized app](https://gojuno.xyz/docs/running/docker).\\n\\n## Installation\\n\\n### Specification \ud83e\udd16\\n\\n    - Raspberry 4 (model B) - 4GB running Raspbian\\n    - MicroSD card - 16GB+ (Class 10 Minimum) or SSD\\n    - Power supply\\n    - Internet connection (ethernet preferrable)\\n    - USB keyboard, a monitor, and an HDMI cable to interact with the computer or ssh into the raspberry pi.\\n\\n### Get Golang \ud83e\uddab\\n\\nEnsure that your Raspberry Pi is up-to-date.\\n\\n```bash\\nsudo apt update\\nsudo apt full-upgrade\\n```\\n\\nCheck the [Golang download website](https://go.dev/dl/) for the latest armv6l version. At time of writing, we would download go 1.18.3.\\n\\n```bash\\nwget https://go.dev/dl/go1.18.3.linux-armv6l.tar.gz -O go.tar.gz\\n```\\n\\nNow extract the tarball into your /usr/local/ directory (root access required).\\n\\n```bash\\nsudo tar -C /usr/local -xzf go.tar.gz\\n```\\n\\nAdd the following to your shell config (usually ~/.bashrc).\\nIf you have no preferred text editor, you can use `nano ~/.bashrc` to edit your bash config from the terminal.\\n\\n```bash \\n# ~/.bashrc\\nexport GOPATH=$HOME/go\\nexport PATH=/usr/local/go/bin:$PATH:$GOPATH/bin\\n```\\n\\nAfterwards press `CTRL` + `X` and then `Y` to exit the nano text editor and save the file.\\n\\nFinally, as your `.bashrc` is only initialised when the shell is started, you need to source the new `~/.bashrc` to update available commands.\\n\\n```bash\\nsource ~/.bashrc\\n```\\n\\nYou should now have a working Golang installation in your Raspberry Pi. You can check it typing:\\n\\n```bash\\ngo version\\n```\\n\\n### Install Juno \u2699\ufe0f\\n\\n### Installing\\n\\nClone the repository:\\n\\n```bash\\ngit clone https://github.com/NethermindEth/juno\\n```\\n\\n#### Install Python dependencies\\n\\nWe are currently only support python `3.7`, and we recommend use pyenv. To install it, you can follow this instruction:\\n\\n1. Install dependencies:\\n\\n```shell\\nsudo apt-get update\\nsudo apt-get install make build-essential git patch zlib1g-dev clang \\\\\\n  openssl libssl-dev libbz2-dev libreadline-dev libsqlite3-dev llvm \\\\\\n  libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev \\\\\\n  liblzma-dev\\n```\\n\\n2. Install pyenv:\\n\\n```shell\\ncurl https://pyenv.run | bash\\n```\\n\\n3. Add the following entries into your `~/.bashrc` file:\\n\\n```shell\\n# pyenv\\nexport PATH=\\"$HOME/.pyenv/bin:$PATH\\"\\neval \\"$(pyenv init --path)\\"\\neval \\"$(pyenv virtualenv-init -)\\"\\n```\\n\\n4. Restart your shell:\\n\\n```shell\\nexec $SHELL\\n```\\n\\n5. Install Python 3.7:\\n\\n```shell\\npyenv install 3.7.13\\npyenv global 3.7.13\\n```\\n\\n6. Inside of the project folder, install Python dependencies:\\n\\n```shell\\n$ pip install -r requirenments.txt\\n```\\n\\n#### Installing Go dependencies\\n\\nYou can install all golang dependencies running the next command inside the project folder:\\n\\n```bash\\n$ go get ./...\\n```\\n\\n### Compile\\n\\n```bash\\n$ make juno\\n```\\n\\n### Run\\n\\nTo synchronize with the StarkNet state from the centralized feeder gateway, run the following\\ncommand:\\n\\n```bash\\n# For Ethereum Goerli testnet\\n$ ./build/juno\\n\\n# For Ethereum Mainnet\\n$ ./build/juno --netowrk 1\\n```\\n\\nTo sync the state without relying on the feeder gateway, configure an Ethereum node and run the following command:\\n\\n```bash\\n# For Ethereum Goerli testnet\\n$ ./build/juno --eth-node \\"<node-endpoint>\\"\\n\\n# For Ethereum Mainnet\\n$ ./build/juno --netowrk 1 --eth-node \\"<node-endpoint>\\"\\n```\\n\\nTo view other available options please run `./build/juno -h`.\\n\\nFor more configuration details, check the [config description](/docs/running/config).\\n\\n## Configuring Juno\\n\\nWhen syncing the StarkNet state from a Raspberry Pi, we expect you to have at least 64GB. In case of you don\'t have\\nthis space, you can run it using an SSD, ensuring that the property `db-path` in the config or the flag `--db-path`\\npoints to the external SSD:\\n\\n```yaml\\n# juno.yaml\\ndb-path: /path/to/ssd/database/here\\n```\\n\\nAnd yes, you are now helping on the StarkNet decentralisation!"},{"id":"welcome","metadata":{"permalink":"/blog/welcome","editUrl":"https://github.com/NethermindEth/juno/tree/main/docs/blog/2022-06-17-welcome/index.md","source":"@site/blog/2022-06-17-welcome/index.md","title":"Welcome","description":"Juno is a Go implementation of a StarkNet full node client made with \u2764\ufe0f by Nethermind.","date":"2022-06-17T00:00:00.000Z","formattedDate":"June 17, 2022","tags":[{"label":"hello","permalink":"/blog/tags/hello"},{"label":"juno","permalink":"/blog/tags/juno"}],"readingTime":1.525,"hasTruncateMarker":false,"authors":[{"name":"Marcos Maceo","title":"StarkNet Core Developer","url":"https://github.com/stdevMac","imageURL":"https://github.com/stdevMac.png","key":"maceo"}],"frontMatter":{"slug":"welcome","title":"Welcome","authors":["maceo"],"tags":["hello","juno"]},"prevItem":{"title":"Running Juno from your Raspberry Pi","permalink":"/blog/junopi"}},"content":"Juno is a Go implementation of a StarkNet full node client made with \u2764\ufe0f by Nethermind.\\n## What You\'ll Need\\n\\n- [Golang](https://go.dev/doc/install) version 1.18 for build and run the project.\\n- _For Linux_: You will need to install `clang`:\\n- Python `3.7`\\n\\n```shell\\nsudo apt -y install clang\\n```\\n\\n### Installing\\n\\n#### Installing Python\\n\\nPython 3.7 is the only supported version and it is recommended you use pyenv using the following instructions:\\n\\n1. Install dependencies:\\n\\n```shell\\nsudo apt-get update; sudo apt-get install make build-essential libssl-dev zlib1g-dev \\\\\\nlibbz2-dev libreadline-dev libsqlite3-dev wget curl llvm \\\\\\nlibncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev\\n\\n```\\n2. Install pyenv:\\n\\n```shell\\ncurl https://pyenv.run | bash\\n```\\n3. Add the following entries into your `~/.bashrc` file:\\n\\n```shell\\n# pyenv\\nexport PATH=\\"$HOME/.pyenv/bin:$PATH\\"\\neval \\"$(pyenv init --path)\\"\\neval \\"$(pyenv virtualenv-init -)\\"\\n```\\n4. Restart your shell:\\n\\n```shell\\nexec $SHELL\\n```\\n5. Install python 3.7:\\n\\n```shell\\npyenv install 3.7.13\\npyenv global 3.7.13\\n```\\n\\n\\n#### Installing Go dependencies\\n\\nAfter cloning the project,\\n\\n```bash\\ngit clone https://github.com/NethermindEth/juno\\n```\\n\\nYou can install all the dependencies by running the next command inside the project root folder:\\n\\n```bash\\n$ go get ./...\\n```\\n\\n## Running Juno\\n\\n### Compiling Directly\\n\\nCompile Juno:\\n\\n```bash\\n$ make juno\\n```\\n\\nTo synchronize with the StarkNet state from the centralized feeder gateway, run the following\\ncommand:\\n\\n```bash\\n# For Ethereum Goerli testnet\\n$ ./build/juno\\n\\n# For Ethereum Mainnet\\n$ ./build/juno --netowrk 1\\n```\\n\\nTo sync the state without relying on the feeder gateway, configure an Ethereum node and run the following command:\\n\\n```bash\\n# For Ethereum Goerli testnet\\n$ ./build/juno --eth-node \\"<node-endpoint>\\"\\n\\n# For Ethereum Mainnet\\n$ ./build/juno --netowrk 1 --eth-node \\"<node-endpoint>\\"\\n```\\nTo view other available options please run `./build/juno -h`.\\n\\nFor more configuration details, check the [config description](/docs/running/config).\\n\\n### Using Docker\\n\\nIf you prefer to use docker, you can follow [this](/docs/running/docker) guide."}]}')}}]);